
// NOTE: This doesn't work completely. The other solution should be considered. 
// The other solution doesn't check functional correctness.
// Array API
//
// These methods are provided as an API for manipulating arrays. You should not
// modify them.
predicate array(self: Ref)
function array_len(self: Ref): Int
    requires array(self)
function array_read(self: Ref, idx: Int): Int
    requires array(self)
    requires 0 <= idx && idx < array_len(self)
method array_write(self: Ref, idx: Int, val: Int)
    requires array(self)
    requires 0 <= idx && idx < array_len(self)
    ensures array(self)
    ensures array_len(self) == old(array_len(self))
    ensures forall i: Int :: {array_read(self, i)} 0 <= i && i < array_len(self) && i != idx ==>
        array_read(self, i) == old(array_read(self, i))
    ensures array_read(self, idx) == val

// PART 1: Circular buffer predicate
//
// Define a predicate for a circular buffer. You may define new fields. You may
// add arguments or heap-based functions for abstraction.
field head: Int
field tail: Int
field capacity: Int
predicate cb(buffer: Ref, content: Seq[Int]) {
    acc(buffer.head) 
    && acc(buffer.tail) 
    && acc(buffer.capacity)
    && array(buffer)
    && array_len(buffer) > 0
    && 0 <= buffer.head && buffer.head < array_len(buffer) 
    && 0 <= buffer.tail && buffer.tail < array_len(buffer)
    && |content| == array_len(buffer)
    && 0 <= buffer.capacity <= array_len(buffer)
    && (forall i: Int :: 0 <= i && i < buffer.capacity ==> 
    array_read(buffer, (buffer.head + i) % array_len(buffer)) 
    == content[buffer.capacity - i - 1]) 
}

// PART 2.1: Read method
//
// Use the cb predicate you defined to implement a method which reads the first
// value from the circular buffer, assuming there is one available as a pre-
// condition.
method cb_read(buf: Ref, content: Seq[Int])
    returns (res: Int)
    requires cb(buf, content)
    requires unfolding cb(buf, content) in  buf.capacity >= 1
    ensures cb(buf, content) 
    ensures unfolding 
    cb(buf, content) in buf.head == (old( unfolding cb(buf, content) in buf.head) + 1) 
    % array_len(old( unfolding cb(buf,content) in buf))
    ensures unfolding cb(buf, content) in buf.capacity == old( unfolding cb(buf, content) in buf.capacity) - 1
{
    unfold cb(buf,content)
    res := array_read(buf, buf.head)
    buf.head := (buf.head + 1) % array_len(buf)
    buf.capacity := buf.capacity - 1

    fold cb(buf, content)
}

// PART 2.2: Write method
//
// Use the cb predicate you defined to implement a method which writes a value
// to the circular buffer, assuming there is room for it as a precondition.
method cb_write(buf: Ref, val: Int, content: Seq[Int])
    requires cb(buf, content)
    requires unfolding cb(buf, content) in buf.capacity < array_len(buf)
    // requires unfolding cb(buf, content) in  array_len(buf) - buf.capacity >= 1
    // requires unfolding cb(buf, content) in (buf.tail + 1) % array_len(buf) != buf.head
    // ensures cb(buf, Seq(val) ++ content[0..(unfolding cb(buf,content) in array_len(buf)) -1])
    // ensures unfolding cb(buf, Seq(val) ++ content) in buf.tail == (old( unfolding cb(buf,content) in buf.tail) + 1) % array_len(old( unfolding cb(buf,content) in buf))
    // ensures unfolding cb(buf, Seq(val) ++ content) in buf.capacity == old( unfolding cb(buf, content) in buf.capacity) + 1

{
    unfold cb(buf, content)
    array_write(buf, buf.tail, val)
    buf.tail := (buf.tail + 1) % array_len(buf)

    buf.capacity := buf.capacity + 1
    fold cb(buf, Seq(val) ++ content[0..(array_len(buf) -1)])
}

// PART 3: Linked list predicate
//
// Define a predicate for a linked list of integers. You may define new fields.
// You may add arguments or heap-based functions for abstraction.
// field next: Ref
// field elem: Int
// predicate list(this: Ref) {
//     acc(this.elem) && acc(this.next) &&
//     (this.next != null ==> list(this.next))
// }

// PART 4: Circular buffer reverse using a linked list
//
// Using the predicates you defined and the read/write methods, implement a
// method which will reverse the contents of a circular buffer, utilising a
// linked list as temporary storage.

// method list_create() returns (res: Ref)
//     ensures list(res)
// {
//     res := new(*)
//     res.next := null
//     fold list(res)
// }

// method list_prepend(this: Ref, e: Int) returns (res: Ref)
//     requires list(this)
//     ensures  list(res)
// {
//     res := new(*)
//     res.elem := e
//     res.next := this
//     fold list(res)
// }

// function list_content(this: Ref): Seq[Int]
//     requires list(this)
// {
//     unfolding list(this) in this.next == null
//     ? Seq[Int]()
//     : Seq(this.elem) ++ list_content(this.next)
// }

// function content(buf: Ref, idx: Int, head_temp: Int): Seq[Int] 
//     requires array(buf)
//     requires idx >= 0
//     requires idx < array_len(buf)
// {
//     idx == head_temp ? Seq[Int]() :
//     ( Seq(array_read(buf, idx)) ++ content(buf, ((idx + 1) % array_len(buf)), head_temp) )
// }

// function reverse_content(buf: Ref, idx: Int, head_temp: Int): Seq[Int] 
//     requires array(buf)
//     requires idx >= 0
//     requires idx < array_len(buf)
// {
//     idx == head_temp ? Seq[Int]() :
//     ( content(buf, ((idx + 1) % array_len(buf)), head_temp) ++ Seq(array_read(buf, idx)) )
// }


// function get_content(buf: Ref): Seq[Int]
//     requires cb(buf)
// {
//     unfolding cb(buf) in content(buf, buf.head, buf.tail)
// }

// function get_reverse_content(buf: Ref): Seq[Int]
//     requires cb(buf)
// {
//     unfolding cb(buf) in reverse_content(buf, buf.head, buf.tail)
// }

// method cb_linked_list_writer(buf: Ref, this: Ref)
//     requires cb(buf) && list(this)
//     ensures cb(buf)
//     // This should ensure  this
//     // ensures get_content(buf) == old(get_reverse_content(buf))
// {
//     unfold list(this)
//     unfold cb(buf)
//     if (this.next != null && ((buf.tail + 1) % array_len(buf) != buf.head)) {
//         fold cb(buf)
//         cb_write(buf, this.elem)
//         cb_linked_list_writer(buf, this.next)
//         unfold cb(buf)
//     }
//     fold cb(buf)
// }

// method cb_linked_list_reverse(buf:Ref, this:Ref) returns (res: Ref)
//     requires list(this) && cb(buf)
//     ensures cb(buf) && list(res)
//     // This should ensure the elements in the list are the same as buffer elements in reverse. 
//     // ensures get_reverse_content(buf) == unfolding cb(buf) in list_content(res)
// {
//     unfold cb(buf)
//     var list_head:Ref := this
//     if (buf.head != buf.tail) {
//         fold cb(buf)
//         var val: Int := cb_read(buf)
//         list_head := list_prepend(list_head,val)
//         res := cb_linked_list_reverse(buf, list_head)
//         unfold cb(buf)
//     } else {
//         res := list_head
//     }
//     fold cb(buf)
    
// }



// method cb_reverse(buf: Ref)
//     requires cb(buf)
//     ensures cb(buf)
//     // ensures get_content(buf) == old(get_reverse_content(buf))

// {
//     var list_head: Ref:= list_create()
//     var res: Ref := cb_linked_list_reverse(buf, list_head)
//     cb_linked_list_writer(buf, res)
// }
//     // ensures unfolding cb(buf) in buf.head == buf.tail
