function Fac(n: Int): Int
{
  n <= 1 ? 1 : n * Fac(n-1)
}


method client()
{
  var x: Int := Fac(1)
  assert x == 1
}

method iterative_fac(n: Int) returns (res: Int)
  requires 0 <= n
  ensures  res == Fac(n)
{
  res := 1
  var i: Int := 1

  while(i <= n) 
    invariant 1 <= i && i <= n+1
    invariant res == Fac(i-1) 
  {
    res := res * i
    i := i + 1
  }
}