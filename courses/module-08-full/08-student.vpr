field id: Int
field ects: Int


method register(student_id: Int) returns (student: Ref)
    ensures acc(student.id) && student.id == student_id
    ensures acc(student.ects) && student.ects == 0
{
    student := new(*)
    student.id := student_id
    student.ects := 0
}

method exam(student: Ref, credits: Int)
    requires acc(student.id) && acc(student.ects)
    requires credits > 0 
    ensures acc(student.id) && acc(student.ects)
    ensures student.id == old(student.id)
    ensures student.ects == old(student.ects) + credits
{
    student.ects := student.ects + credits
}

method finish(student: Ref) returns (graduated: Bool)
    requires acc(student.id) && acc(student.ects)
    ensures graduated <==> old(student.ects) >= 120
{
    graduated := (student.ects >= 120)
}

method client()
{
    var alice: Ref
    var bob: Ref

    alice := register(123)
    bob := register(567)

    assert alice != bob
    assert alice.ects + bob.ects == 0

    exam(alice, 10)
    exam(bob, 15)

    var done: Bool
    done := finish(bob)
    assert !done

    // should fail
    // assert bob.ects < 120

    exam(alice, 15)
    exam(alice, 15)
    exam(alice, 80)

    done := finish(alice)
    assert done
}