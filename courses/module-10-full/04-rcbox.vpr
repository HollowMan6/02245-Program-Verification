/* This example shows copy-on-write with binary reference counting.
   It uses fractional permissions and a field of type Perm to provide 
   full access when the underlying structure is not shared.
*/

// class Text Segment
field data: Ref
field start: Int
field len: Int
field frac: Perm  // we'd like wildcard + (write - wildcard) == write, but that's not true. So we use a concrete fraction instead of wildcards.

// class Text
field shared: Bool
field value: Seq[Int]   // could for instance be a large array that is expensive to copy

predicate segment(this: Ref) {
    acc(this.data) && acc(this.start) && acc(this.len) && acc(this.frac) &&
    none < this.frac &&
    acc(this.data.shared, this.frac) &&   // any concrete fraction would limit the maximum degree of sharing
    acc(this.data.value, this.frac) &&
    (!this.data.shared ==> acc(this.data.shared, write - this.frac) && acc(this.data.value, write - this.frac)) &&
    // alternative: (!this.data.shared ==> this.frac == write) &&
    0 <= this.start && 
    0 <= this.len && 
    this.start + this.len <= |this.data.value|
}


// create a TextSegment and the underlying Text
method create(v: Seq[Int]) returns (s: Ref) 
    ensures segment(s)
{
    var d: Ref 
    d := new(shared, value)
    d.shared := false
    d.value := v

    s := new(data, start, len, frac)
    s.data := d
    s.start := 0
    s.len := |v|
    s.frac := write

    fold segment(s)
}

// introduce sharing of Text
method prefix(this: Ref, n: Int) returns (res: Ref)
    requires segment(this)
    requires 0 <= n
    ensures  segment(this) && segment(res)
{
    unfold segment(this)

    res := new(data, start, len, frac)
    res.data := this.data
    res.start := 0
    res.len := (n <= |this.data.value| ? n : |this.data.value|) // avoid out of bounds
    res.frac := this.frac / 2
    this.frac := this.frac / 2

    if(!this.data.shared) {
        this.data.shared := true
    }
    fold segment(res)
    fold segment(this)
}


// copy on write, if shared
method update(this: Ref, v: Seq[Int]) 
    requires segment(this)
    ensures  segment(this)
{
    unfold segment(this)
    if(this.data.shared) {
        var d: Ref 
        d := new(shared, value)
        d.shared := false
        d.value := v
        this.data := d        
        this.frac := write
    } else {
        this.data.value := v
    }
    this.start := 0
    this.len := |this.data.value|
    fold segment(this)
}
