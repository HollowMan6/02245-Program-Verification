domain X {
  function Fib(n: Int): Int

  axiom {
    forall n: Int :: n >= 0 ==> Fib(n) == (
      (n < 2) ? n 
              : Fib(n-2) + Fib(n-1)
    )
  }
}


method iterativeFib(n: Int) 
  returns (r: Int)
  requires n >= 0
  ensures r == Fib(n)
{ // use loop pattern 3
  r := 0 
  var s: Int := 1
  var i: Int := 0

  while (i != n)
    invariant 0 <= i <= n 
    invariant r == Fib(i)
    invariant s == Fib(i+1)
  { // use loop pattern 2
    var t: Int := s 
    s := r + s 
    r := t 
    i := i + 1
  }
}