method cube(n: Int) 
  returns (r: Int)
  requires n >= 0
  ensures r == n * n * n
{
  r := 0
  var i: Int := 0
  var s: Int := 0
  var t: Int := 0
  while (i != n)
    invariant 0 <= i && i <= n 
    invariant r == i * i * i     
    invariant s == 3 * i * i 
    invariant t == 3 * i
  {
    r := r + s + t + 1
    // r := r + 3*i*i + 3*i + 1 // <-- not allowed
    assert r == i*i*i + 3*i*i + 3*i + 1
    assert r == i*i*i + 2*i*i + i + i*i + 2*i + 1
    assert r == (i*i + 2*i + 1) * (i+1)
    assert r == (i + 1) * (i + 1) * (i+1)
    
      assert 3 * i*i + 6*i + 3 == 3 * i*i + 6*i + 3
      s := s + t + t + 3
      // s := 3 * i*i + 6*i + 3 <- not allowed
      assert s == 3 * i*i + 6*i + 3
      assert s == 3 * (i+1) * (i+1) 

        t := t + 3
        assert t == 3 * i + 3
        assert t == 3 * (i+1)

    i := i + 1
    assert r == i * i * i
      assert s == 3 * i * i 
        assert t == 3 * i
  }
}